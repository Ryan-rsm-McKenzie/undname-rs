searchState.loadedDescShard("undname", 0, "Overview\nContains the error value\n<code>Flags</code> control how types are printed during demangling. See …\nOutput only the name for the primary declaration.\nSuppress access specifiers (<code>private</code>/<code>public</code>/<code>protected</code>) from …\nSee also <code>NO_ACCESS_SPECIFIER</code>.\nSee also <code>NO_CALLING_CONVENTION</code>.\nSuppress calling conventions (<code>__cdecl</code>/<code>__fastcall</code>/<code>__thiscall</code>…\nSee also <code>NO_TAG_SPECIFIER</code>.\nSee also <code>NO_RETURN_TYPE</code>.\nSuppress leading underscores on Microsoft extended …\nSuppress member types (<code>static</code>/<code>virtual</code>/<code>extern &quot;C&quot;</code>) from …\nSuppress Microsoft keywords (<code>__restrict</code>/<code>__unaligned</code>/<code>__cdecl</code>…\nSuppress return types from being included in the output.\nSuppress tag specifiers (<code>class</code>/<code>struct</code>/<code>union</code>) from being …\nSuppress modifiers on the <code>this</code> type (<code>const</code>/<code>volatile</code>/…\nSuppress variable types from being included in the output.\nContains the success value\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nDemangles a Microsoft symbol stored in <code>mangled_name</code>.\nSee <code>demangle</code> for more info.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.")